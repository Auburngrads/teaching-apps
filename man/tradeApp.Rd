% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tradeApp.R
\name{tradeApp}
\alias{tradeApp}
\title{Transfer an app between packages and/or directories}
\usage{
tradeApp(app, from = "teachingApps", to = NULL, remove = F)
}
\arguments{
\item{app}{\code{character} The \code{basename} of a directory containing a shiny app.}

\item{from}{\code{character} Location from which the app and calling function will be traded. (see details)}

\item{to}{\code{character} Location to which the app and calling function will be traded. (see details)}

\item{remove}{\code{logical} If \code{TRUE}, the app and calling function files will be removed from \code{from}.}
}
\description{
Moves ('trades') a directory containing a shiny app along with
the app's calling function file.  \code{tradeApp} is a wrapper
function for performing three types of app 'trades': package-to-package, 
package-to-directory, and directory-to-package.  These trade 
types should cover most use-cases.
}

\section{The \code{from} Agrument}{

The \code{from} argument

\describe{
\item{thing 1}{stuff}
\item{thing 2}{stuff}
}
}

\details{
The \code{from} argument may be specified in the four ways: (1) as

\itemize{
\item thing 1 - stuff
}


\tabular{rll}{
 package name \tab \tab The name of a package in \code{installed.packages} \cr
 package file \tab \tab The full path to any file in a local package. Calls \code{rprojroot::find_root} to determine if the file is in a package. \cr
 file path \tab \tab The full path to a local file in a directory containing a shiny app.
 }     
     
   \code{from} and \code{to}
   
   If \code{from} is the name of an installed package, the function
   looks for the subdirectory \code{from/apps/app}.  If this 
   subdirectory existsif it exists. package's directory
   is search for a subdirectory  between directories, from a pacakge to a directory, or 
   from a directory to a package. Can be the name of an installed package or a directory
   
 1. package-to-package - trade an app and calling function from one package to another
 2. package-to-directory - trade an app and calling function from a package to a local directory
 3. directory-to-package - trade an app and calling function from a local directory to a package
}
